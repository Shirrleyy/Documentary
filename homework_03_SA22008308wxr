rm(list=ls())  #clean space
rm(species)

install.packages("vegan")
install.packages("gclus")
install.packages("FD")
install.packages("factoextra")
library(tidyverse)
library(caret)
library(dplyr)
library(vegan)
library(gclus)
library(cluster)

##STEP 1
#read doubs and delete the site8 wich has no fishes
data(doubs,package = "ade4") 
fish<-doubs$fish %>% mutate(fish,tfs=rowSums(doubs$fish))
total_fish<-subset(fish,tfs!=0)

#find the site has the most species and how many species
spe<-doubs$fish 
summary(spe)
spe<-spe[-8,]#delete no fishes site
env<-doubs$env
env<-env[-8,]

#env<-doubs$env
seq(along=total_fish[,28])[total_fish[,28]==max(total_fish[,28])]
seq(along=total_fish[,28])[total_fish[,28]==min(total_fish[,28])]
max<-max(total_fish$tfs)
min<-min(total_fish$tfs)

#Which species is the most widespread (found in the most sites)?
mw_species=data.frame()
for (i in 1:27){
  null_0 <-sum(total_fish[,i]==0)
  mw_species=rbind(mw_species,cbind(colnames(total_fish[i]),null_0))
}
head(mw_species)
mw_species
seq(along=mw_species[,2])[mw_species[,2]==min(mw_species[,2])]
min_species<-min(mw_species$null_0)

#################################################################################
##STEP 2
#choose R-model to do association measure
spe.t<-t(spe)# 物种丰度转置
spe.t.chi<-decostand(spe.t,"chi.square")
spe.t.D<-dist(spe.t.chi)

env.t<-t(env)# 环境因子转置
env.t.chi<-decostand(env.t,"chi.square")
env.t.D<-dist(env.t.chi)

#ward & single minimum variance clustering
spe.t.chi.single<-hclust(spe.t.D,method = "single")
plot(spe.t.chi.single)
spe.t.chi.ward <- hclust(spe.t.D, method="ward.D2")
plot(spe.t.chi.ward)
source("coldiss.R")
coldiss(spe.t.D,byrank=FALSE,diag=FALSE)

env.t.chi.single<-hclust(env.t.D,method = "single")
plot(env.t.chi.single)
env.t.chi.ward <- hclust(env.t.D, method="ward.D2")
plot(env.t.chi.ward)
source("coldiss.R")
coldiss(env.t.D,byrank=FALSE,diag=FALSE)

#Q mode aggregated the locations
spe.norm<-decostand(spe,"normalize")
spe.ch<-vegdist(spe.norm,"euc")#Calculate the string distance matrix between quadrat
spe.dc<- vegdist(spe.norm)#Chord distance cluster
spe.hel<-decostand(spe,"hel")
spe.dh<-vegdist(spe.hel)# Hellinger square

env.norm<-decostand(env,"normalize")
env.ch<-vegdist(env.norm,"euc")#Calculate the string distance matrix between quadrat
env.dc<- vegdist(env.norm)#Chord distance cluster
env.hel<-decostand(env,"hel")
env.dh<-vegdist(env.hel)# Hellinger square

#ward & single minimum variance clustering
spe.ch.ward <- hclust(spe.ch, method="ward.D2")
plot(spe.ch.ward)
spe.ch.single<-hclust(spe.ch,method = "single")
plot(spe.ch.single)

env.ch.ward <- hclust(env.ch, method="ward.D2")
plot(env.ch.ward)
env.ch.single<-hclust(env.ch,method = "single")
plot(env.ch.single)
####################################################################################
##STEP 3
#choose the right analytic method
print(decorana(t(spe)))
#Axis lengths belongs to 3.0~4.0,so choose RDA analysis
RDA<-rda(spe,env,scale=T)

#extract statistics
#spe_rda<-data.frame(RDA$CCA$u[,1:2],rownames(env))
#colnames(spe_rda)=c("RDA1","RDA2","samples")
#score
#spe_rda_score<-data.frame(RDA$CCA$v[,1:2])
#Calculate axle label data
#RDA1=round(RDA$CCA$eig[1]/sum(RDA$CCA$eig)*100,2)
#RDA2=round(RDA$CCA$eig[2]/sum(RDA$CCA$eig)*100,2)
plot(RDA)

# Hellinger pre-transformation
spe_hel <- decostand(spe, method = 'hellinger')

#use all env data
rda_tb <- rda(spe_hel~., env, scale = FALSE)

#drawing
plot(rda_tb)#finish


           
